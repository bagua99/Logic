#include "GameLogic.h"
#include <iostream>

int main()
{
	CGameLogic gameLogic;

	/*BYTE cbCardData[MAX_COUNT] =
	{
	0x01,0x01,0x01,0x01,
	0x02,0x02,0x02,0x02,
	0x03,0x03,0x03,0x03,
	0x04,0x04,0x04,
	0x05,0x05,0x05,
	0x06,0x06
	};*/

	/*BYTE cbCardData[MAX_COUNT] =
	{
	0x01,0x01,0x01,0x07,
	0x02,0x02,0x02,0x02,
	0x03,0x03,0x03,0x0A,
	0x04,0x04,0x04,
	0x05,0x05,0x05,
	0x06,0x06
	};*/

	/*char cbCardData[MAX_COUNT] =
	{
	0x11,0x11,0x11,
	0x12,0x12,0x12,
	0x13,0x13,0x13,
	0x07,0x07,0x07,
	0x08,0x08,0x08,
	0x1A,0x1A,0x1A,
	0x09,0x09,
	};*/

	/*BYTE cbCardData[MAX_COUNT] =
	{
	0x11,0x11,0x11,
	0x12,0x12,0x02,
	0x13,0x13,0x0A,
	0x14,0x14,0x04,
	0x05,0x05,0x05,
	0x07,0x07,0x06,
	0x07,0x07
	};*/

	/*BYTE cbCardData[MAX_COUNT] =
	{
	0x11,0x11,0x11,
	0x12,0x12,0x12,
	0x13,0x13,0x13,
	0x14,0x14,0x14,
	0x05,0x05,0x05,
	0x07,0x07,0x07,
	0x17,0x19
	};*/

	/*BYTE cbCardData[] =
	{
	0x12,0x13,0x14,
	0x02,0x07
	};*/

	/*BYTE cbCardData[] =
	{
	0x12,0x12,0x12,
	0x02,0x0A,
	0x02,0x07,0x0A,
	0x15,0x16,0x17,
	0x1A,0x1A,0x1A
	};*/

	/*BYTE cbCardData[] =
	{
	0x01,
	0x06,0x06,
	0x08,0x08,
	0x15,0x15,
	0x05
	};*/

	/*BYTE cbCardData[MAX_COUNT] =
	{
	0x11,0x11,0x11,
	0x12,0x12,0x12,
	0x13,0x13,0x13,
	0x14,0x14,0x14,
	0x05,0x05,0x05,
	0x07,0x07,0x07,
	0x11,0x12
	};*/

	BYTE cbCardData[] =
	{
		0x15,0x16,0x17,
	};

	ULONGLONG dwTick = GetTickCount64();
	BYTE cbCardIndex[MAX_INDEX] = { 0 };	// ÓÃ»§ÆË¿Ë
	for (int i = 0; i<sizeof(cbCardData) - 1; ++i)
	{
		cbCardIndex[gameLogic.SwitchToCardIndex(cbCardData[i])]++;
	}

	int nTick = GetTickCount();
	tagHuCardInfo HuCardInfo;
	HuCardInfo.bSpecialHu = false;
	HuCardInfo.bSelfAddCard = false;
	if (gameLogic.GetHuCardInfo(cbCardIndex, cbCardData[sizeof(cbCardData) - 1], 7, HuCardInfo))
	{
		cout << "Find Hu ms = " << GetTickCount() - nTick << endl;

		for (int i = 0; i<HuCardInfo.cbWeaveCount; ++i)
		{
			tagWeaveItem &WeaveItem = HuCardInfo.WeaveItemArray[i];
			int nWeaveHuXi = gameLogic.GetWeaveHuXi(WeaveItem);
			printf("cbWeaveKind=%d,cbCardCount=%d,nWeaveHuXi=%d\ncbCardList[0]=0x%02x,cbCardList[1]=0x%02x,cbCardList[2]=0x%02x,cbCardList[3]=0x%02x\n", WeaveItem.cbWeaveKind, WeaveItem.cbCardCount, nWeaveHuXi, WeaveItem.cbCardList[0], WeaveItem.cbCardList[1], WeaveItem.cbCardList[2], WeaveItem.cbCardList[3]);
		}
	}
	else
	{
		cout << "not Hu ms = " << GetTickCount() - nTick << endl;
	}

	return 0;
}